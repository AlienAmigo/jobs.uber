// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$calendar-name: 'calendar';
$calendar-x: 0px;
$calendar-y: 99px;
$calendar-offset-x: 0px;
$calendar-offset-y: -99px;
$calendar-width: 86px;
$calendar-height: 77px;
$calendar-total-width: 280px;
$calendar-total-height: 269px;
$calendar-image: '../img/sprite-png.png';
$calendar: (0px, 99px, 0px, -99px, 86px, 77px, 280px, 269px, '../img/sprite-png.png', 'calendar', );
$form-name: 'form';
$form-x: 213px;
$form-y: 0px;
$form-offset-x: -213px;
$form-offset-y: 0px;
$form-width: 67px;
$form-height: 86px;
$form-total-width: 280px;
$form-total-height: 269px;
$form-image: '../img/sprite-png.png';
$form: (213px, 0px, -213px, 0px, 67px, 86px, 280px, 269px, '../img/sprite-png.png', 'form', );
$inventory-name: 'inventory';
$inventory-x: 0px;
$inventory-y: 180px;
$inventory-offset-x: 0px;
$inventory-offset-y: -180px;
$inventory-width: 59px;
$inventory-height: 89px;
$inventory-total-width: 280px;
$inventory-total-height: 269px;
$inventory-image: '../img/sprite-png.png';
$inventory: (0px, 180px, 0px, -180px, 59px, 89px, 280px, 269px, '../img/sprite-png.png', 'inventory', );
$order-name: 'order';
$order-x: 110px;
$order-y: 0px;
$order-offset-x: -110px;
$order-offset-y: 0px;
$order-width: 99px;
$order-height: 93px;
$order-total-width: 280px;
$order-total-height: 269px;
$order-image: '../img/sprite-png.png';
$order: (110px, 0px, -110px, 0px, 99px, 93px, 280px, 269px, '../img/sprite-png.png', 'order', );
$payment-name: 'payment';
$payment-x: 0px;
$payment-y: 0px;
$payment-offset-x: 0px;
$payment-offset-y: 0px;
$payment-width: 106px;
$payment-height: 95px;
$payment-total-width: 280px;
$payment-total-height: 269px;
$payment-image: '../img/sprite-png.png';
$payment: (0px, 0px, 0px, 0px, 106px, 95px, 280px, 269px, '../img/sprite-png.png', 'payment', );
$spritesheet-width: 280px;
$spritesheet-height: 269px;
$spritesheet-image: '../img/sprite-png.png';
$spritesheet-sprites: ($calendar, $form, $inventory, $order, $payment, );
$spritesheet: (280px, 269px, '../img/sprite-png.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
